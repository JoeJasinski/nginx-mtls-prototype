# Sources:
# - https://fardog.io/blog/2017/12/30/client-side-certificate-authentication-with-nginx/
# - https://medium.com/geekculture/mtls-with-nginx-and-nodejs-e3d0980ed950
# - https://serversforhackers.com/c/redirect-http-to-https-nginx

# for docker to run in foreground
#daemon off;
error_log /dev/stdout debug;

load_module modules/ngx_http_js_module.so;

events {
    worker_connections 768;
}


http {


  js_path "/etc/nginx/njs/";
  js_import main from subject_alternative.js;
  js_set $san main.san;

  access_log /dev/stdout;

  # some HTTP boilerplate
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;
  server_tokens off;

  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  # tls defaults
  ssl_protocols       TLSv1.2 TLSv1.3;
  ssl_ciphers         HIGH:!aNULL:!MD5;
  ssl_prefer_server_ciphers on;

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }


  server {
      listen 80 default_server;
      server_name _;
      return 302 https://$host$request_uri;
  }

  server {
      listen                 443 ssl default_server;
      server_name            _;


      # server certs info
      ssl_certificate     /srv/server.crt;
      ssl_certificate_key /srv/server.key;


      # client certs info
      ssl_client_certificate /srv/root-ca.crt;
      # optional client verification to allow error message
      ssl_verify_client      optional;


      location / {
        # fail if client cert is invalid
        if ($ssl_client_verify != SUCCESS) {
          return 403;
        }

        # boilerplate haders
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;

        # client cert
        proxy_set_header     SSL_Client_Issuer $ssl_client_i_dn;
        proxy_set_header     SSL_Client $ssl_client_s_dn;
        proxy_set_header     SSL_Client_Verify $ssl_client_verify;
        proxy_set_header     SSL_Client_Cert $ssl_client_escaped_cert;
        proxy_set_header     SSL_Client_Cert_Raw $ssl_client_raw_cert;

        # web sockets
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Fix the "It appears that your reverse proxy set up is broken" error.
        #proxy_pass          http://localhost:8080;
        #proxy_read_timeout  90;

        # response headers for debug
        add_header     SSL_Client_San $san;
        add_header     SSL_Client_Issuer $ssl_client_i_dn;
        add_header     SSL_Client $ssl_client_s_dn;
        add_header     SSL_Client_Verify $ssl_client_verify;
        add_header     SSL_Client_Cert $ssl_client_escaped_cert;
        add_header     SSL_Client_Cert_Raw $ssl_client_raw_cert;

        return 200 "HI";

      }

  }

}
